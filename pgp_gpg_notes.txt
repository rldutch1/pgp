Encryption / Decryption

Encrypt a single file (creates a binary file). This option may be combined with --sign.

 	gpg -e filename

 	or

 	gpg --encrypt filename

Encrypt a single file (creates an ASCII file). This option may be combined with --sign.

	gpg -a -e filename

	or

	gpg --armor --encrypt filename

This is a special version of the --encrypt command. The command expects the files to be encrypted either on the command line or reads the filenames from stdin; each name must be on separate line. The command is intended for a quick encryption of multiple files.
Encrypt multiple files. This option may be combined with --sign.

 	gpg --encrypt-files file1 file2 file3

Encrypt with symmetric cipher only. This command asks for a passphrase. (May also be combined with --sign -- see GnuPG 1.0.7 released.)

 	gpg -c filename

 	or

 	gpg --symmetric filename

Encrypt to a recipient.

	gpg -e -r recipient filename

	or

	gpg --encrypt -r recipient filename

	or encrypt and sign.

	gpg -e -r recipient -s filename

Decrypt file (or stdin if no file is specified) and write it to stdout (or the file specified with --output). If the decrypted file is signed, the signature is also verified. This command differs from the default operation, as it never writes to the filename which is included in the file and it rejects files which don't begin with an encrypted message.

 	gpg --decrypt filenames

Decrypt a file that has been binary or ascii encrypted and output to a file:
	gpg --output decrypted.txt --decrypt encrypted.txt.gpg

	or

	gpg -o decrypted.txt -d encrypted.txt.gpg

This is a special version of the --decrypt command. The command expects the files to be decrypted either on the command line or reads the filenames from stdin; each name must be on separate line. The command is intended for a quick decryption of multiple files.

 	gpg --decrypt-files file1 file2 file3

Multiple Private Keys.

When encrypting or decrypting it is possible to have more than one private key in use. If this occurs you need to select the active key. This can be done by using the option -u UID or by using the option --local-user UID. This causes the default key used to be replaced by the wanted key.

	gpg -u <KEY ID> -r recipient --armor --sign --encrypt filename

	or

	gpg -u <KEY ID> -r recipient -a -s -e filename

	or (this should prompt you for recipients)

	gpg -u nameofprivatekey -a -s -e filename

Signing / Verifying

Make a signature. This command may be combined with --encrypt. (May also be combined with --symmetric (see GnuPG 1.0.7 released.)

 	gpg -s filename

 	or

  gpg --sign filename
  Both -s and --sign make an illegible signature that you can't read. This is OK because GPG/PGP can still read it (not humans).

Make a clear text signature.

 	gpg --clearsign filename

Make a detached signature.

 	gpg -b filename

 	or

 	gpg --detach-sign filename

Assume that sigfile is a signature and verify it without generating any output. With no arguments, the signature packet is read from stdin. If only a sigfile is given, it may be a complete signature or a detached signature, in which case the signed stuff is expected in a file without the ".sig" or ".asc" extension. With more than 1 argument, the first should be a detached signature and the remaining files are the signed stuff. To read the signed stuff from stdin, use - as the second filename. For security reasons a detached signature cannot read the signed material from stdin without denoting it in the above way.

 	gpg --verify sigfile signed_files

This is a special version of the --verify command which does not work with detached signatures. The command expects the files to be verified either on the command line or reads the filenames from stdin; each name must be on separate line. The command is intended for quick checking of many files.

 	gpg --verify-files filenames


Options
Starting with GnuPG 1.1.92 (incl. GnuPG 1.2.1, 1.2.0 and 1.1.92), long options can be put in an options file (default "~/.gnupg/gpg.conf"). In GnuPG versions up through GnuPG 1.1.91 (incl. 1.0.6, 1.0.7, and 1.1.91), long options can be put in an "old style" configuration file (default "~/.gnupg/options").
Short option names will not work -- for example, armor is a valid option for the options file, while a is not. Do not write the 2 dashes, but simply the name of the option and any required arguments. Lines with a hash as the first non-white-space character are ignored. Commands may be put in this file too, but that does not make sense.

GPG recognizes these options:

General

Create ASCII armored output.

 	gpg -a -e filename

 	or

 	gpg --armor -e filename

Assume the input data is not in ASCII armored format.

 	gpg --no-armor

Use canonical text mode. If -t (but not --textmode) is used together with armoring and signing, this enables clearsigned messages. This kludge is needed for PGP compatibility; normally you would use --sign or --clearsign to selected the type of the signature.

 	gpg -t

 	or

 	gpg --textmode

Write output to file.

 	gpg -o outputfilename -d encryptedfilename

 	or

 	gpg --output filename -d encryptedfilename

Encrypt for user id name. If this option is not specified, GnuPG asks for the user-id unless --default-recipient is given.

 	gpg -r nameofkey

 	or

 	gpg --recipient nameofkey

Sets up a name group, which is similar to aliases in email programs. Any time the group name is a receipient (-r or --recipient), it will be expanded to the values specified.
The values are key IDs or fingerprints, but any key description is accepted. Note that a value with spaces in it will be treated as two different values. Note also there is only one level of expansion -- you cannot make a group that points to another group.

 	gpg --group name=value

Use name as default recipient if option --recipient is not used and don't ask if this is a valid one. name must be non-empty.

 	gpg --default-recipient nameofkey

Use the default key as default recipient if option --recipient is not used and don't ask if this is a valid one. The default key is the first one from the secret keyring or the one set with --default-key.

 	gpg --default-recipient-self

Reset --default-recipient and --default-recipient-self.

 	gpg --no-default-recipient

Use name as default user ID for signatures. If this is not used the default user ID is the first user ID found in the secret keyring.

 	gpg --default-key nameofkey

Same as --recipient but this one is intended for use in the options file and may be used with your own user-id as an "encrypt-to-self." These keys are only used when there are other recipients given either by use of --recipient or by the asked user id. No trust checking is performed for these user ids and even disabled keys can be used.

 	gpg --encrypt-to name

Disable the use of all --encrypt-to keys.

 	gpg --no-encrypt-to


Comments & Versions

Use string as comment string in clear text signatures. The default is not to write a comment string.

 	gpg --comment string

Force to write the standard comment string in clear text signatures. Use this to overwrite a --comment from a config file. This option is now obsolete because there is no default comment string anymore.

 	gpg --default-comment

Omit the version string in clear text signatures.

 	gpg --no-version

Force to write the version string in clear text signatures. Use this to overwrite a previous --no-version from a config file.

 	gpg --emit-version

Special

Set the "for your eyes only" flag in the message. This causes GnuPG to refuse to save the file unless the --output option is given, and PGP to use the "secure viewer" with a Tempest-resistant font to display the message. This option overrides --set-filename.

 	--for-your-eyes-only

Resets the --for-your-eyes-only flag.

 	--no-for-your-eyes-only

 Set compression level to n. A value of 0 for n disables compression. Default is to use the default compression level of zlib (normally 6).

 	-z n, --compress n

Skip the signature verification step. This may be used to make the decryption faster if the signature verification is not needed.

 	--skip-verify

When making a data signature, prompt for an expiration time. If this option is not specified, the expiration time is "never."

 	gpg --ask-sig-expire

Resets the --ask-sig-expire option.

 	gpg --no-ask-sig-expire

Do not put the keyid into encrypted packets. This option hides the receiver of the message and is a countermeasure against traffic analysis. It may slow down the decryption process because all available secret keys are tried.

 	gpg --throw-keyid

Don't look at the key ID as stored in the message but try all secret keys in turn to find the right decryption key. This option forces the behaviour as used by anonymous recipients (created by using --throw-keyid) and might come handy in case where an encrypted message contains a bogus key ID.

 	gpg --try-all-secrets

Put the name value pair into the signature as notation data. Name must consist only of alphanumeric characters, digits or the underscore; the first character must not be a digit. Value may be any printable string; it will be encoded in UTF8, so you should check that your --charset is set correctly. If you prefix name with an exclamation mark, the notation data will be flagged as critical (rfc2440:5.2.3.15).

 	gpg -N
 	gpg --notation-data name=value

This option changes the behavior of cleartext signatures so that they can be used for patch files. You should not send such an armored file via email because all spaces and line endings are hashed too. You can not use this option for data which has 5 dashes at the beginning of a line, patch files don't have this. A special armor header line tells GnuPG about this cleartext signature option.

 	gpg --not-dash-escaped

Because some mailers change lines starting with "From " to "<From " it is good to handle such lines in a special way when creating cleartext signatures. All other PGP versions do it this way too. This option is not enabled by default because it would violate rfc2440.

 	gpg --escape-from-lines

Use string as the name of file which is stored in messages.

 	gpg --set-filename string

Try to create a file with a name as embedded in the data. This can be a dangerous option as it allows to overwrite files.

 	gpg --use-embedded-filename

This option enables a mode in which filenames of the form "-&n," where n is a non-negative decimal number, refer to the file descriptor n and not to a file with that name.

 	gpg --enable-special-filenames

Create a key.

	gpg --gen-key

Revoke a Key.

gpg --gen-revoke

	This creates a revocation certificate. To be able to do this, you need a secret key, else anyone could revoke your certificate. This has one disadvantage. If I do not know the passphrase the key has become useless. But I cannot revoke the key! To overcome this problem it is wise to create a revoke license when you create a key pair. And if you do so, keep it safe! This can be on disk, paper, etc. Make sure that this certificate will not fall into wrong hands!!!! If you don't someone else can issue the revoke certificate for your key and make it useless.


Key Administration:
With the GnuPG system comes a file that acts as some kind of database. In this file all data regarding keys with the information that comes with the keys is stored.

List all the keys:

	This will show you the HEX key IDs and other information.
	gpg --list-keys

List all the keys and see the signatures as well type:

  gpg --list-sigs

To see the fingerprints type:

	gpg --fingerprint

	You want to see "Fingerprints" to ensure that somebody is really the person they claim (like in a telephone call). This command will result in a list of relatively small numbers.

To list the secret keys you type:

	gpg --list-secret-keys

Note that listing fingerprints and signatures from private keys has no use whatsoever.

In order to delete a public key you type:

 gpg --delete-key UID

For deleting a secrete key you type:

  gpg --delete-secret-key

There is one more important command that is relevant for working with keys.

 gpg --edit-key <HEX KEY ID>

	Using this you can edit (among other things) the expiration date, add a fingerprint and sign your key. When in this mode you can press the question mark key to see the options available to you.

Import a key:

	gpg --import filename

Export your key:

	Export public key in binary format:
	gpg --export <KEY ID>

	Export public key in ascii format:
	gpg --export -a <KEY ID>

	Export secret key in binary format:
	gpg --export-secret-key <KEY ID>

	Export secret key in ascii format:
	gpg --export-secret-key -a <KEY ID>

Source:
https://www.gnupg.org/gph/en/manual/x110.html
http://www.dewinter.com/gnupg_howto/english/GPGMiniHowto-3.html#ss3.5
https://www.gnupg.org/documentation/howtos.html
https://github.com/rldutch1/pgp/blob/master/commandline_switches.html
