Encryption / Decryption

The GNU Privacy Handbook - https://www.gnupg.org/gph/en/manual/book1.html

Youtube Videos:
  GnuPG Part One https://www.youtube.com/watch?v=IF-MchgZ2Os
  GnuPG Part Two https://www.youtube.com/watch?v=R-Dw7UXH00c
  GnuPG Part Three https://www.youtube.com/watch?v=JOBJPwyByyI
  NITC-GnuPG Part 3 https://www.youtube.com/watch?v=xAGfWyNgi2Q

Generate/Create Key:
  Create / generate GPG/PGP keys:
	  gpg2 --full-gen-key
	  gpg --gen-key

  Send key to default key server:
	  gpg --send-key KEYNAME

  Send key to specific key server:
	  gpg --keyserver hkp://pgp.mit.edu --send-key KEYNAME

  Export ascii armored key:
	  gpg --export --armor jqdoe@example.com > jqdoe-pubkey.asc
	  gpg --export-secret-keys --armor jqdoe@example.com > jqdoe-privkey.asc
	  Use a double greater than symbol to export both public and private to the same file ">>".


Encrypt a message to standard output.
  gpg -ea
  Enter your recipients and end with an empty line.
  Type your message that you want to encrypt.
  Press Control+D and your encrypted message will appear onscreen.

  If you want to encrypt the above message to a file you can type: gpg -ea > filename.txt
  then do the steps above.
  Enter your recipients and end with an empty line.
  Type your message that you want to encrypt.
  Press Control+D and your encrypted message will be sent to filename.txt.

Encrypt a single file (creates a binary file). This option may be combined with --sign.

 	gpg -e filename

 	or

 	gpg --encrypt filename

Encrypt a single file (creates an ASCII file). This option may be combined with --sign.

	gpg -a -e filename

	or

	gpg --armor --encrypt filename

	or

	gpg -ea filename

This is a special version of the --encrypt command. The command expects the files to be encrypted either on the command line or reads the filenames from stdin; each name must be on separate line. The command is intended for a quick encryption of multiple files.
Encrypt multiple files. This option may be combined with --sign.

 	gpg --encrypt-files file1 file2 file3

Encrypt with symmetric cipher only. This command asks for a passphrase. (May also be combined with --sign -- see GnuPG 1.0.7 released.)

 	gpg -c filename

 	or

 	gpg --symmetric filename

Encrypt to a recipient.

	gpg -e -r recipient filename

	or

	gpg --encrypt -r recipient filename

	or encrypt and sign.

	gpg -e -r recipient -s filename

Use -u to specify the secret key to be used, and -r to specify the public key of the recipient.
    As an example: gpg -e -u "Billy Bob" -r "Nancy Bob" mydata.tar
    gpg -e -u "Sender User Name" -r "Receiver User Name" somefile

Password encrypt and sign a file:
	gpg -c -s filename

UUEncode a file before ascii encrypting:
	uuencode filename filename > filename.uue
	gpg -a -e filename.uue

UUEncode a file before normal encrypting:
	uuencode filename filename > filename.uue
	gpg --encrypt filename.uue

Decrypt UUEncoded file with normal encryption then UUDecode it:
	gpg --decrypt filename > filename.uue
	uudecode filename.uue

Decrypt a message in standard out (stout).
  gpg
  You will see a message similar to this: gpg: Go ahead and type your message ...
  At this point you can paste in the encrypted text and you will be prompted for your passphrase.
  Once you enter your passphrase, press Control+D to see the decrypted message.

Decrypt file (or stdin if no file is specified) and write it to stdout (or the file specified with --output). If the decrypted file is signed, the signature is also verified. This command differs from the default operation, as it never writes to the filename which is included in the file and it rejects files which don't begin with an encrypted message.

 	gpg --decrypt filenames

Decrypt a file that has been binary or ascii encrypted and output to a file:
	gpg --output decrypted.txt --decrypt encrypted.txt.gpg

	or

	gpg -o decrypted.txt -d encrypted.txt.gpg

This is a special version of the --decrypt command. The command expects the files to be decrypted either on the command line or reads the filenames from stdin; each name must be on separate line. The command is intended for a quick decryption of multiple files.

 	gpg --decrypt-files file1 file2 file3

Multiple Private Keys.

When encrypting or decrypting it is possible to have more than one private key in use. If this occurs you need to select the active key. This can be done by using the option -u UID or by using the option --local-user UID. This causes the default key used to be replaced by the wanted key.

	gpg -u <KEY ID> -r recipient --armor --sign --encrypt filename

	or

	gpg -u <KEY ID> -r recipient -a -s -e filename

	or (this should prompt you for recipients)

	gpg -u nameofprivatekey -a -s -e filename

Signing / Verifying

Make a signature. This command may be combined with --encrypt. (May also be combined with --symmetric (see GnuPG 1.0.7 released.)

 	gpg -s filename

 	or

  gpg --sign filename
  Both -s and --sign make an illegible signature that you can't read. This is OK because GPG/PGP can still read it (not humans).

Make a clear text signature.

 	gpg --clearsign filename

Make a detached signature.

 	gpg -b filename

 	or

 	gpg --detach-sign filename

Assume that sigfile is a signature and verify it without generating any output. With no arguments, the signature packet is read from stdin. If only a sigfile is given, it may be a complete signature or a detached signature, in which case the signed stuff is expected in a file without the ".sig" or ".asc" extension. With more than 1 argument, the first should be a detached signature and the remaining files are the signed stuff. To read the signed stuff from stdin, use - as the second filename. For security reasons a detached signature cannot read the signed material from stdin without denoting it in the above way.

 	gpg --verify sigfile signed_files

This is a special version of the --verify command which does not work with detached signatures. The command expects the files to be verified either on the command line or reads the filenames from stdin; each name must be on separate line. The command is intended for quick checking of many files.

 	gpg --verify-files filenames


Options
Starting with GnuPG 1.1.92 (incl. GnuPG 1.2.1, 1.2.0 and 1.1.92), long options can be put in an options file (default "~/.gnupg/gpg.conf"). In GnuPG versions up through GnuPG 1.1.91 (incl. 1.0.6, 1.0.7, and 1.1.91), long options can be put in an "old style" configuration file (default "~/.gnupg/options").
Short option names will not work -- for example, armor is a valid option for the options file, while a is not. Do not write the 2 dashes, but simply the name of the option and any required arguments. Lines with a hash as the first non-white-space character are ignored. Commands may be put in this file too, but that does not make sense.

GPG recognizes these options:

General

Create ASCII armored output.

 	gpg -a -e filename

 	or

 	gpg --armor -e filename

Assume the input data is not in ASCII armored format.

 	gpg --no-armor

Use canonical text mode. If -t (but not --textmode) is used together with armoring and signing, this enables clearsigned messages. This kludge is needed for PGP compatibility; normally you would use --sign or --clearsign to selected the type of the signature.

 	gpg -t

 	or

 	gpg --textmode

Write output to file.

 	gpg -o outputfilename -d encryptedfilename

 	or

 	gpg --output filename -d encryptedfilename

Encrypt for user id name. If this option is not specified, GnuPG asks for the user-id unless --default-recipient is given.

 	gpg -r nameofkey

 	or

 	gpg --recipient nameofkey

Sets up a name group, which is similar to aliases in email programs. Any time the group name is a receipient (-r or --recipient), it will be expanded to the values specified.
The values are key IDs or fingerprints, but any key description is accepted. Note that a value with spaces in it will be treated as two different values. Note also there is only one level of expansion -- you cannot make a group that points to another group.

 	gpg --group name=value

Use name as default recipient if option --recipient is not used and don't ask if this is a valid one. name must be non-empty.

 	gpg --default-recipient nameofkey

Use the default key as default recipient if option --recipient is not used and don't ask if this is a valid one. The default key is the first one from the secret keyring or the one set with --default-key.

 	gpg --default-recipient-self

Reset --default-recipient and --default-recipient-self.

 	gpg --no-default-recipient

Use name as default user ID for signatures. If this is not used the default user ID is the first user ID found in the secret keyring.

 	gpg --default-key nameofkey

Same as --recipient but this one is intended for use in the options file and may be used with your own user-id as an "encrypt-to-self." These keys are only used when there are other recipients given either by use of --recipient or by the asked user id. No trust checking is performed for these user ids and even disabled keys can be used.

 	gpg --encrypt-to name

Disable the use of all --encrypt-to keys.

 	gpg --no-encrypt-to


Comments & Versions

Use string as comment string in clear text signatures. The default is not to write a comment string.

 	gpg --comment string

Force to write the standard comment string in clear text signatures. Use this to overwrite a --comment from a config file. This option is now obsolete because there is no default comment string anymore.

 	gpg --default-comment

Omit the version string in clear text signatures.

 	gpg --no-version

Force to write the version string in clear text signatures. Use this to overwrite a previous --no-version from a config file.

 	gpg --emit-version

Special

Set the "for your eyes only" flag in the message. This causes GnuPG to refuse to save the file unless the --output option is given, and PGP to use the "secure viewer" with a Tempest-resistant font to display the message. This option overrides --set-filename.

 	--for-your-eyes-only

Resets the --for-your-eyes-only flag.

 	--no-for-your-eyes-only

 Set compression level to n. A value of 0 for n disables compression. Default is to use the default compression level of zlib (normally 6).

 	-z n, --compress n

Skip the signature verification step. This may be used to make the decryption faster if the signature verification is not needed.

 	--skip-verify

When making a data signature, prompt for an expiration time. If this option is not specified, the expiration time is "never."

 	gpg --ask-sig-expire

Resets the --ask-sig-expire option.

 	gpg --no-ask-sig-expire

Do not put the keyid into encrypted packets. This option hides the receiver of the message and is a countermeasure against traffic analysis. It may slow down the decryption process because all available secret keys are tried.

 	gpg --throw-keyid

Don't look at the key ID as stored in the message but try all secret keys in turn to find the right decryption key. This option forces the behaviour as used by anonymous recipients (created by using --throw-keyid) and might come handy in case where an encrypted message contains a bogus key ID.

 	gpg --try-all-secrets

Put the name value pair into the signature as notation data. Name must consist only of alphanumeric characters, digits or the underscore; the first character must not be a digit. Value may be any printable string; it will be encoded in UTF8, so you should check that your --charset is set correctly. If you prefix name with an exclamation mark, the notation data will be flagged as critical (rfc2440:5.2.3.15).

 	gpg -N
 	gpg --notation-data name=value

This option changes the behavior of cleartext signatures so that they can be used for patch files. You should not send such an armored file via email because all spaces and line endings are hashed too. You can not use this option for data which has 5 dashes at the beginning of a line, patch files don't have this. A special armor header line tells GnuPG about this cleartext signature option.

 	gpg --not-dash-escaped

Because some mailers change lines starting with "From " to "<From " it is good to handle such lines in a special way when creating cleartext signatures. All other PGP versions do it this way too. This option is not enabled by default because it would violate rfc2440.

 	gpg --escape-from-lines

Use string as the name of file which is stored in messages.

 	gpg --set-filename string

Try to create a file with a name as embedded in the data. This can be a dangerous option as it allows to overwrite files.

 	gpg --use-embedded-filename

This option enables a mode in which filenames of the form "-&n," where n is a non-negative decimal number, refer to the file descriptor n and not to a file with that name.

 	gpg --enable-special-filenames

Create a key.

	gpg --gen-key

Revoke a Key.

	gpg --gen-revoke THEKEYID > revoked.key

	This creates a revocation certificate. To be able to do this, you need a secret key, otherwise anyone could revoke your certificate. This has one disadvantage. If you do not know the passphrase for the secret key, the revocation key will become useless and you cannot revoke the secret key! To overcome this problem it is wise to create a revoke license when you create a key pair. And if you do so, keep it safe! This can be on disk, paper, etc. Make sure that this certificate will not fall into wrong hands!!!! If you don't someone else can issue the revoke certificate for your key and make it useless.

  You will need to enter the revoke reason for the key and an optional comment.

  Once you have the revocation certificate, you will need to import it so that the key will get revoked.

  gpg --import revoked.key
  Type: gpg --list-keys and you will see that the key has been revoked.

  Next, you will have send the revoked key to the key server. This is the same method as sending a normal key except this one has been revoked. When the server receives the revoked key, it will be removed from the server.

Key Administration:
With the GnuPG system comes a file that acts as some kind of database. In this file all data regarding keys with the information that comes with the keys is stored.

List all the keys:

	This will show you the HEX key IDs and other information.
	gpg --list-keys

  To show the "Short Key" ID.
  gpg -K --with-fingerprint --with-colons | grep "sec" | cut -f5 -d ':'

List all the keys and see the signatures as well type:

  gpg --list-sigs

To see the fingerprints type:

	gpg --fingerprint

	You want to see "Fingerprints" to ensure that somebody is really the person they claim (like in a telephone call). This command will result in a list of relatively small numbers.

To list the secret keys you type:

	gpg --list-secret-keys

Note that listing fingerprints and signatures from private keys has no use whatsoever.

In order to delete a public key you type:

 	gpg --delete-key UID

For deleting a secret key you type:

  gpg --delete-secret-key  (You have to delete the private key before deleting the public key)

There is one more important command that is relevant for working with keys.

	gpg --edit-key <HEX KEY ID>

	Using this you can edit (among other things) the expiration date, add a fingerprint and sign your key. When in this mode you can press the question mark key to see the options available to you.

Import a key:

	gpg --import filename

Export your key:

	Export public key in binary format:
	gpg --export <KEY ID>

	Export public key in ascii format:
	gpg --export -a <KEY ID>

	Export secret key in binary format:
	gpg --export-secret-key <KEY ID>

	Export secret key in ascii format:
	gpg --export-secret-key -a <KEY ID>

Source:
https://www.gnupg.org/gph/en/manual/x110.html
http://www.dewinter.com/gnupg_howto/english/GPGMiniHowto-3.html#ss3.5
https://www.gnupg.org/documentation/howtos.html
https://github.com/rldutch1/pgp/blob/master/commandline_switches.html

Here is a PGP function that I have created and use on my Mac and Linux computers (it works on Windows too with Git or Cygwin installed). I named it "pgp" so that it is different from gpg and will not conflict.

pgp(){
case $1 in
        ascii)
        echo "ASCII Encrypting... " $2
        gpg -a -e $2
        echo "..." >> $2;rm -f $2
        echo $2 " has been deleted!"
        ;;
        uue)
        echo "UUEncoding..." $2
        uuencode $2 $2 > $2.uue
        echo "ASCII Encrypting..." $2.uue
        gpg -a -e $2.uue
        echo "..." > $2.uue;rm -f $2 $2.uue
        echo $2 " has been deleted!"
        ;;
        uuegpg)
        echo "UUEncoding..." $2
        uuencode $2 $2 > $2.uue
        echo "Encrypting..." $2.uue
        gpg --encrypt $2.uue
        echo "..." > $2.uue;rm -f $2 $2.uue
        echo $2 " has been deleted!"
        ;;
        uuedecrypt)
        gpg --decrypt $2 > $2.uue
        echo "Decoding..." $2
        uudecode $2.uue;
        echo "..." > $2.uue;rm -f $2.uue
        echo $2 " has been decoded!"
        ;;
        passencrypt)
        echo "Encrypting..." $2
        gpg -c -s $2
        echo $2 " has been password encrypted!"
        ;;
        clearsign)
        echo "Signing..." $2
        gpg --clearsign $2
        echo $2 " has an associated signature file!"
        ;;
        sign)
        echo "Signing..." $2
        gpg --sign $2
        echo $2 " has been signed!"
        ;;
        verify)
        echo "Signing..." $2
        gpg --verify $2
        echo $2 " verify status!"
        ;;
        decrypto)
        #gpg --decrypt $2
        if [ ! $3 ]; then
        echo "Syntax: pgp decrypto outputfile encryptedfile.asc"
        else
        gpg --output $2 --decrypt $3
        fi
        ;;
        decrypt)
        if [ ! $2 ] ; then
        echo "Syntax: pgp decrypt encryptedfile.asc"
        else
        gpg --decrypt $2
        fi
        ;;
        encrypt)
        echo "Encrypting..." $2
        gpg --encrypt $2
        echo "..." > $2;rm -f $2
        echo $2 " has been deleted!"
        ;;
        import)
        echo "Importing..." $2
        gpg --import $2
        echo $2 " has been imported!"
        ;;
        list)
        gpg --list-keys
        ;;
        fingerprint)
        gpg --fingerprint $2
        ;;
        fingerprint_from_file)
        gpg --with-fingerprint $2
        ;;
        delete-keys)
        echo "Deleting..." $2
        gpg --delete-keys $2
        gpg --list-keys
        ;;
	message)
	cd ~/Documents/PGP/messages
	xyzrh1=message.`date +"%Y%m%d%H%M%S%Z"`
	vi $xyzrh1.txt; pgp ascii $xyzrh1.txt
	;;
        *)
        message00="gpg --edit-key 5DD98B3E"
      	message01="pgp ascii textfile"
      	message02="pgp clearsign textfile"
      	message03="pgp decrypt encryptedfile.tar.gpg"
      	message04="pgp decrypto outputfile.tar encryptedfile.tar.gpg"
      	message05="pgp delete-keys 5DD98B3E"
      	message06="pgp encrypt filename"
      	message07="pgp fingerprint 5DD98B3E"
      	message08="pgp fingerprint_from_file file_with_key"
      	message09="pgp import filename.asc"
      	message10="pgp list"
      	message11="pgp message"
      	message12="pgp passencrypt textfile"
      	message13="pgp sign textfile"
      	message14="pgp uue filename"
      	message15="pgp uuegpg filename"
      	message16="pgp uuedecrypt filename"
      	message17="pgp verify filename"
        echo $message00
        echo $message01
        echo $message02
        echo $message03
        echo $message04
        echo $message05
        echo $message06
        echo $message07
        echo $message08
        echo $message09
        echo $message10
        echo $message11
        echo $message12
        echo $message13
        echo $message14
        echo $message15
        echo $message16
        echo $message17
        echo " "
   ;;
esac
}

To send your public key to a keyserver:
  gpg --keyserver the.keyserver.name.com --send-keys YOURKEYID
  Example: gpg --keyserver keyserver.ubuntu.com --send-keys 5DD98B3E
  Example: gpg --keyserver hkp://pgp.mit.edu --send-key YOURKEYID
  Example: gpg --keyserver hkps.pool.sks-keyservers.net --send-key YOURKEYID

To receive a public key from a keyserver:
  gpg --keyserver the.keyserver.name.com --recv-keys THEKEYID
  Example: gpg --keyserver keyserver.ubuntu.com --recv-keys 5DD98B3E

To view your trust database and see the marginal and other trust information type:
  gpg --update-trustdb

Before a key can be trusted it must be signed and the trust level applied by the key owner. Marginally (Marginal) trusted keys can also be trusted if 3 or more people you trust have chosen to trust the same key that you have marginally trusted. Or if 3 or more marginally trusted people marginally trust the same key then it will be considered trusted by your key.

There is a graphical user interface for GnuPG called GPG Privacy Assistant (GPA). It can be installed by typing:
  sudo apt-get -y install gpa
  sudo dnf -y install gpa

On Fedora Linux, the passphrase cache timeout was 300 seconds (5 minutes). I couldn't find where I could change that setting. I ended up installing dconf-editor and I was able to change the passphrase cache. I added screenshots (dconf-editor_settings##.png.

I installed Open GnuPG on my Mac using: sudo port install gnupg2
I like it a lot better thant the GPG Suite that I was previously using because I can encrypt and decrypt from an SSH session without the GUI password prompt preventing me from decrypting something. I have also discovered that I no longer seem to be able to use the command 'gpg < encryptedfile'. I get a message that says it doesn't understand what I am trying to do. I actually have to paste in the encrypted content and press control+d.
